1. Two strings are anagrams if they both are permutation of each other
ex : ebbac   cbabe   =>true
Solution:
if(s1.length()!=s2.length())return false;
for(ll i=0;i<s1.length();i++)count[s1[i]]++;
for(ll i=0;i<s2.length();i++)count[s2[i]]--;
for(i=0;i<256;i++)if(count[i]!=0)return false;

2.Given a string,find the leftmost character that repeats
#IMP : if repeats ,return first index of character
Test: abcba
o/p: 0
int firstRepeating(string str)
{
    int res=INT_MAX
    int FI[256]={-1,-,1-,1....}
    loop over string
    {
        if(FI[str[i]]==-1)FI[str[i]]=i;
        else res=min(res,FI[str[i]])
    }
    cout<<(res==INT_MAX)?-1:res;
}

3. Given a string ,find the leftmost character index that does not repeats
int firstNonRepeating(string str)
{
    int res=INT_MAX
    int FI[256]={-1,-1,-1,....}
    loop over string
    {
        if(FI[str[i]]==-1)FI[str[i]]=i;
        else FI[str[i]]=-2
    }
    for(ll i=0;i<256;i++)
    {
        if(FI[i]>=0)res=min(res,FI[i]);
    }
    return (res==INT_MAX)?-1:res;
}

4. Given a string find lexicographic rank of int
I/P : "BAC"
O/P: 3
SOlution: 
ABC
ACB 
BAC   <--- 3rd rank 
BCA 
CAB 
CBA 
#Explanation: Lexicographic rank is a rank when we write all permuation of a given string in the order the come first in ASCII value

int lexRank(string str)
{
    int res=1;
    int n=str.length();
    int mul=fact(n);
    int count[256]={0};
    ll rank=0;
    for(ll i=0;i<n;i++)count[str[i]]++
    //this gives count of all characters which are smaller than this
    for(ll i=1;i<256;i++)count[i]=count[i]+count[i-1];
    for(ll i=0;i<n;i++)
    {
        mul=mul/(n-i);
        rank+=(count[str[i]-1])*mul;
        for(ll j=str[i];j<256;j++)count[j]--;
    }
    return rank;
}


5. Given a  text string and pattern string,find if a permutation of the pattern exists in the text
I/P : txt="geeksforgeeks"
      pat="egek"
O/P : YES
I/P : txt="geeksforgeeks"
      pat="gks"
O/p : No 

bool isAnagramPresent(string txt,string pat)
{
    int countTxtW[256]={};
    int countPatW[256]={};
    int n=txt.length();
    int m=pat.length();
    for(int i=0;i<m;i++)
    {
        countTxtW[txt[i]]++;
        countPatW[pat[i]]++;
    }
    for(int i=m;i<n;i++)
    {
        if(areSame(countTxtW,countPatW))return true;
        countTxtW[txt[i]]++;
        countTxtW[txt[i-m]]--;
    }
    return false;
}


6. Given two strings ,check if they are rotations of each other
I/P : s1="ABCD" s2="CDAB"
O/P : true
I/P : "ABAA"   "AAAB"
O/P : true
I/P : "ABAB"   "ABBA"

bool areRotations(string s1,string s2)
{
    if(s1.length()!=s2.length())return false;
    s1=s1+s1;
    return (s1.find(s2)!=string::npos)
}

7. Pattern searching algorithm

Test case 1:
txt : ABCABCD
pat : ABCD  
O/P : 3

Test case 2:
txt : ABABAB
pat : ABAB
O/P : 0 2

#Naive algorithm
Time COmplexity:O((n-m+1)*m)
void patSearch(string txt,string pat)
{
    int n=txt.length();int m=pat.length();
    for(ll i=0;i<=n-m;i++)
    {
        ll j;
        for(j=0;j<m;j++)
        {
            if(txt[i+j]!=pat[j])break;
        }
        if(j==m)print(i);
    }
}

#Better algorithm,but works only when all characters in pattern string are different
"Text case 2" is invalid for this algorithm

void patSearch(string txt,string pat)
{
    int n=txt.length();
    int m=pat.length();
    for(ll i=0;i<=n-m;)
    {
        ll j;
        for(ll j=0;j<m;j++)
        {
            if(txt[i+j]!=pat[j])break;
        }
        if(j==m)print(i);
        if(j==0)i++;
        else i+=j;
    }
}